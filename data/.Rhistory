startRow=1, colNames=TRUE, detectDates=TRUE)
# Cleaning: remove "#" on every value
data[fieldLabel] <- as.numeric(gsub("[^.0-9]", "", data[fieldLabel][,]))
temp = aggregate(data[fieldLabel], list(data$Month,data$Year), FUN=aggregateType, na.rm=TRUE)
names(temp)[1] = "Month"
names(temp)[2] = "Year"
names(temp)[3] = field
temp$month_txt = month.abb[temp$Month]
grids[[loc]] <- temp
plotYmax <- max(plotYmax, temp[[field]])
plotYmin <- min(plotYmin, temp[[field]])
}
commands <- ifelse(shouldOutputFigure, "arrangeGrob(", "grid.arrange(")
for (loc in locations) {
grids[[loc]] <- ggplot(data=grids[[loc]], aes(x=month_txt,y=get(field))) +
ylim(plotYmin, plotYmax) +
ggtitle(loc) +
geom_boxplot(aes(month_txt, get(field)), outlier.shape = NA) +
geom_point(aes(colour=cut(Year, c(2001, 2002, 2017, 2018)), size=cut(Year, c(2001, 2002, 2017, 2018))), position=jitter, alpha=0.5) +
scale_color_manual(name = "Years",
values = c("(2001,2002]" = "green4",
"(2002,2017]" = "Black",
"(2017,2018]" = "Red"),
labels = c("2002", "2003-2017", "2018")) +
scale_size_manual(name = "Years",
values = c(2, 1, 2),
labels = c("2002", "2003-2017", "2018")) +
scale_x_discrete(limits=month.abb[1:8]) +
labs(x = "Month") +
labs(y = fieldPlotLabel)
commands <- paste(commands, "grids$", loc, ", ", sep="")
}
commands <- paste(commands, "nrow=", gridRowNum, ")", sep="")
g <- eval(parse(text=commands))
if (shouldOutputFigure) {
ggsave(outputFile, g, units="in", width=outputPlotWidth,
height=outputPlotHeight, dpi=300, compression = "lzw")
} else {
g
}
#---------USER INPUTS-------------
shouldOutputFigure <- T
outputFile <- "../../figure/area_all_temp_mean.tiff"
outputPlotWidth <- 4
outputPlotHeight <- 3
## choose temperature field between "absMin", "mean", "absMax"
field <- "mean"
fieldPlotLabel <- "Monthly Mean Temperature (°C)"
## aggregate type, could be "min", "mean", "max", or "sum"
aggregateType <- "mean"
## choose a list of location from: (the code will automatically detect district/area)
# districts: "SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK"
# areas    : "NTN", "NTS", "KL", "HK", "HKL"
# the plots will be divided into grids
locations <- c("NTS")
gridRowNum <- 1 # number of grid rows
# plot's y axis limit
plotYmax <- -1
plotYmin <- 1000
grids <- c()
allDistricts <- c("SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK")
allAreas <- c("NTS", "NTN", "KL", "HK", "HKL", "ALL")
fieldLabels <- list(absMax="Absolute.Daily.Max.Temperature",
mean="Daily.Mean.Temperature",
absMin="Absolute.Daily.Min.Temperature")
fieldLabel <- as.character(fieldLabels[field])
jitter <- position_jitter(width=0.25, height=0)
for (loc in locations) {
excelFilename <- ifelse(loc %in% allDistricts, "HKCD", "HKCD_areas")
data <- read.xlsx(paste("../../dat/climate/", excelFilename, ".xlsx", sep=""),
sheet=paste("HKCD", loc, sep=""),
startRow=1, colNames=TRUE, detectDates=TRUE)
# Cleaning: remove "#" on every value
data[fieldLabel] <- as.numeric(gsub("[^.0-9]", "", data[fieldLabel][,]))
temp = aggregate(data[fieldLabel], list(data$Month,data$Year), FUN=aggregateType, na.rm=TRUE)
names(temp)[1] = "Month"
names(temp)[2] = "Year"
names(temp)[3] = field
temp$month_txt = month.abb[temp$Month]
grids[[loc]] <- temp
plotYmax <- max(plotYmax, temp[[field]])
plotYmin <- min(plotYmin, temp[[field]])
}
commands <- ifelse(shouldOutputFigure, "arrangeGrob(", "grid.arrange(")
for (loc in locations) {
grids[[loc]] <- ggplot(data=grids[[loc]], aes(x=month_txt,y=get(field))) +
ylim(plotYmin, plotYmax) +
ggtitle(loc) +
geom_boxplot(aes(month_txt, get(field)), outlier.shape = NA) +
geom_point(aes(colour=cut(Year, c(2001, 2002, 2017, 2018)), size=cut(Year, c(2001, 2002, 2017, 2018))), position=jitter, alpha=0.5) +
scale_color_manual(name = "Years",
values = c("(2001,2002]" = "green4",
"(2002,2017]" = "Black",
"(2017,2018]" = "Red"),
labels = c("2002", "2003-2017", "2018")) +
scale_size_manual(name = "Years",
values = c(2, 1, 2),
labels = c("2002", "2003-2017", "2018")) +
scale_x_discrete(limits=month.abb[1:8]) +
labs(x = "Month") +
labs(y = fieldPlotLabel)
commands <- paste(commands, "grids$", loc, ", ", sep="")
}
commands <- paste(commands, "nrow=", gridRowNum, ")", sep="")
g <- eval(parse(text=commands))
if (shouldOutputFigure) {
ggsave(outputFile, g, units="in", width=outputPlotWidth,
height=outputPlotHeight, dpi=300, compression = "lzw")
} else {
g
}
#---------USER INPUTS-------------
shouldOutputFigure <- T
outputFile <- "../desktop/figure/area_all_temp_mean.tiff"
outputPlotWidth <- 4
outputPlotHeight <- 3
## choose temperature field between "absMin", "mean", "absMax"
field <- "mean"
fieldPlotLabel <- "Monthly Mean Temperature (°C)"
## aggregate type, could be "min", "mean", "max", or "sum"
aggregateType <- "mean"
## choose a list of location from: (the code will automatically detect district/area)
# districts: "SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK"
# areas    : "NTN", "NTS", "KL", "HK", "HKL"
# the plots will be divided into grids
locations <- c("ALL")
gridRowNum <- 1 # number of grid rows
# plot's y axis limit
plotYmax <- -1
plotYmin <- 1000
grids <- c()
allDistricts <- c("SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK")
allAreas <- c("NTS", "NTN", "KL", "HK", "HKL", "ALL")
fieldLabels <- list(absMax="Absolute.Daily.Max.Temperature",
mean="Daily.Mean.Temperature",
absMin="Absolute.Daily.Min.Temperature")
fieldLabel <- as.character(fieldLabels[field])
jitter <- position_jitter(width=0.25, height=0)
for (loc in locations) {
excelFilename <- ifelse(loc %in% allDistricts, "HKCD", "HKCD_areas")
data <- read.xlsx(paste("../../dat/climate/", excelFilename, ".xlsx", sep=""),
sheet=paste("HKCD", loc, sep=""),
startRow=1, colNames=TRUE, detectDates=TRUE)
# Cleaning: remove "#" on every value
data[fieldLabel] <- as.numeric(gsub("[^.0-9]", "", data[fieldLabel][,]))
temp = aggregate(data[fieldLabel], list(data$Month,data$Year), FUN=aggregateType, na.rm=TRUE)
names(temp)[1] = "Month"
names(temp)[2] = "Year"
names(temp)[3] = field
temp$month_txt = month.abb[temp$Month]
grids[[loc]] <- temp
plotYmax <- max(plotYmax, temp[[field]])
plotYmin <- min(plotYmin, temp[[field]])
}
commands <- ifelse(shouldOutputFigure, "arrangeGrob(", "grid.arrange(")
for (loc in locations) {
grids[[loc]] <- ggplot(data=grids[[loc]], aes(x=month_txt,y=get(field))) +
ylim(plotYmin, plotYmax) +
ggtitle(loc) +
geom_boxplot(aes(month_txt, get(field)), outlier.shape = NA) +
geom_point(aes(colour=cut(Year, c(2001, 2002, 2017, 2018)), size=cut(Year, c(2001, 2002, 2017, 2018))), position=jitter, alpha=0.5) +
scale_color_manual(name = "Years",
values = c("(2001,2002]" = "green4",
"(2002,2017]" = "Black",
"(2017,2018]" = "Red"),
labels = c("2002", "2003-2017", "2018")) +
scale_size_manual(name = "Years",
values = c(2, 1, 2),
labels = c("2002", "2003-2017", "2018")) +
scale_x_discrete(limits=month.abb[1:8]) +
labs(x = "Month") +
labs(y = fieldPlotLabel)
commands <- paste(commands, "grids$", loc, ", ", sep="")
}
commands <- paste(commands, "nrow=", gridRowNum, ")", sep="")
g <- eval(parse(text=commands))
if (shouldOutputFigure) {
ggsave(outputFile, g, units="in", width=outputPlotWidth,
height=outputPlotHeight, dpi=300, compression = "lzw")
} else {
g
}
#---------USER INPUTS-------------
shouldOutputFigure <- T
outputFile <- "../../figure/area_all_temp_mean.tiff"
outputPlotWidth <- 10
outputPlotHeight <- 8
## choose temperature field between "absMin", "mean", "absMax"
field <- "mean"
fieldPlotLabel <- "Monthly Mean Temperature (°C)"
## aggregate type, could be "min", "mean", "max", or "sum"
aggregateType <- "mean"
## choose a list of location from: (the code will automatically detect district/area)
# districts: "SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK"
# areas    : "NTN", "NTS", "KL", "HK", "HKL"
# the plots will be divided into grids
locations <- c("ALL")
gridRowNum <- 1 # number of grid rows
# plot's y axis limit
plotYmax <- -1
plotYmin <- 1000
grids <- c()
allDistricts <- c("SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK")
allAreas <- c("NTS", "NTN", "KL", "HK", "HKL", "ALL")
fieldLabels <- list(absMax="Absolute.Daily.Max.Temperature",
mean="Daily.Mean.Temperature",
absMin="Absolute.Daily.Min.Temperature")
fieldLabel <- as.character(fieldLabels[field])
jitter <- position_jitter(width=0.25, height=0)
for (loc in locations) {
excelFilename <- ifelse(loc %in% allDistricts, "HKCD", "HKCD_areas")
data <- read.xlsx(paste("../../dat/climate/", excelFilename, ".xlsx", sep=""),
sheet=paste("HKCD", loc, sep=""),
startRow=1, colNames=TRUE, detectDates=TRUE)
# Cleaning: remove "#" on every value
data[fieldLabel] <- as.numeric(gsub("[^.0-9]", "", data[fieldLabel][,]))
temp = aggregate(data[fieldLabel], list(data$Month,data$Year), FUN=aggregateType, na.rm=TRUE)
names(temp)[1] = "Month"
names(temp)[2] = "Year"
names(temp)[3] = field
temp$month_txt = month.abb[temp$Month]
grids[[loc]] <- temp
plotYmax <- max(plotYmax, temp[[field]])
plotYmin <- min(plotYmin, temp[[field]])
}
commands <- ifelse(shouldOutputFigure, "arrangeGrob(", "grid.arrange(")
for (loc in locations) {
grids[[loc]] <- ggplot(data=grids[[loc]], aes(x=month_txt,y=get(field))) +
ylim(plotYmin, plotYmax) +
ggtitle(loc) +
geom_boxplot(aes(month_txt, get(field)), outlier.shape = NA) +
geom_point(aes(colour=cut(Year, c(2001, 2002, 2017, 2018)), size=cut(Year, c(2001, 2002, 2017, 2018))), position=jitter, alpha=0.5) +
scale_color_manual(name = "Years",
values = c("(2001,2002]" = "green4",
"(2002,2017]" = "Black",
"(2017,2018]" = "Red"),
labels = c("2002", "2003-2017", "2018")) +
scale_size_manual(name = "Years",
values = c(2, 1, 2),
labels = c("2002", "2003-2017", "2018")) +
scale_x_discrete(limits=month.abb[1:8]) +
labs(x = "Month") +
labs(y = fieldPlotLabel)
commands <- paste(commands, "grids$", loc, ", ", sep="")
}
commands <- paste(commands, "nrow=", gridRowNum, ")", sep="")
g <- eval(parse(text=commands))
if (shouldOutputFigure) {
ggsave(outputFile, g, units="in", width=outputPlotWidth,
height=outputPlotHeight, dpi=300, compression = "lzw")
} else {
g
}
#---------USER INPUTS-------------
shouldOutputFigure <- T
outputFile <- "../../figure/area_all_temp_mean.tiff"
outputPlotWidth <- 4
outputPlotHeight <- 3
## choose temperature field between "absMin", "mean", "absMax"
field <- "mean"
fieldPlotLabel <- "Monthly Mean Temperature (°C)"
## aggregate type, could be "min", "mean", "max", or "sum"
aggregateType <- "mean"
## choose a list of location from: (the code will automatically detect district/area)
# districts: "SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK"
# areas    : "NTN", "NTS", "KL", "HK", "HKL"
# the plots will be divided into grids
locations <- c("ALL")
gridRowNum <- 1 # number of grid rows
grids <- c()
allDistricts <- c("SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK")
allAreas <- c("NTS", "NTN", "KL", "HK", "HKL", "ALL")
fieldLabels <- list(absMax="Absolute.Daily.Max.Temperature",
mean="Daily.Mean.Temperature",
absMin="Absolute.Daily.Min.Temperature")
fieldLabel <- as.character(fieldLabels[field])
jitter <- position_jitter(width=0.25, height=0)
for (loc in locations) {
excelFilename <- ifelse(loc %in% allDistricts, "HKCD", "HKCD_areas")
data <- read.xlsx(paste("../../dat/climate/", excelFilename, ".xlsx", sep=""),
sheet=paste("HKCD", loc, sep=""),
startRow=1, colNames=TRUE, detectDates=TRUE)
# Cleaning: remove "#" on every value
data[fieldLabel] <- as.numeric(gsub("[^.0-9]", "", data[fieldLabel][,]))
temp = aggregate(data[fieldLabel], list(data$Month,data$Year), FUN=aggregateType, na.rm=TRUE)
names(temp)[1] = "Month"
names(temp)[2] = "Year"
names(temp)[3] = field
temp$month_txt = month.abb[temp$Month]
grids[[loc]] <- temp
plotYmax <- max(plotYmax, temp[[field]])
plotYmin <- min(plotYmin, temp[[field]])
}
commands <- ifelse(shouldOutputFigure, "arrangeGrob(", "grid.arrange(")
for (loc in locations) {
grids[[loc]] <- ggplot(data=grids[[loc]], aes(x=month_txt,y=get(field))) +
ylim(plotYmin, plotYmax) +
ggtitle(loc) +
geom_boxplot(aes(month_txt, get(field)), outlier.shape = NA) +
geom_point(aes(colour=cut(Year, c(2001, 2002, 2017, 2018)), size=cut(Year, c(2001, 2002, 2017, 2018))), position=jitter, alpha=0.5) +
scale_color_manual(name = "Years",
values = c("(2001,2002]" = "green4",
"(2002,2017]" = "Black",
"(2017,2018]" = "Red"),
labels = c("2002", "2003-2017", "2018")) +
scale_size_manual(name = "Years",
values = c(2, 1, 2),
labels = c("2002", "2003-2017", "2018")) +
scale_x_discrete(limits=month.abb[1:8]) +
labs(x = "Month") +
labs(y = fieldPlotLabel)
commands <- paste(commands, "grids$", loc, ", ", sep="")
}
commands <- paste(commands, "nrow=", gridRowNum, ")", sep="")
g <- eval(parse(text=commands))
if (shouldOutputFigure) {
ggsave(outputFile, g, units="in", width=outputPlotWidth,
height=outputPlotHeight, dpi=300, compression = "lzw")
} else {
g
}
# plot's y axis limit
plotYmax <- 1000
plotYmin <- -1
grids <- c()
allDistricts <- c("SLW", "TY", "TKL", "SK", "ST", "TP", "TM", "YL", "CC", "TC", "HK")
allAreas <- c("NTS", "NTN", "KL", "HK", "HKL", "ALL")
fieldLabels <- list(absMax="Absolute.Daily.Max.Temperature",
mean="Daily.Mean.Temperature",
absMin="Absolute.Daily.Min.Temperature")
fieldLabel <- as.character(fieldLabels[field])
jitter <- position_jitter(width=0.25, height=0)
for (loc in locations) {
excelFilename <- ifelse(loc %in% allDistricts, "HKCD", "HKCD_areas")
data <- read.xlsx(paste("../../dat/climate/", excelFilename, ".xlsx", sep=""),
sheet=paste("HKCD", loc, sep=""),
startRow=1, colNames=TRUE, detectDates=TRUE)
# Cleaning: remove "#" on every value
data[fieldLabel] <- as.numeric(gsub("[^.0-9]", "", data[fieldLabel][,]))
temp = aggregate(data[fieldLabel], list(data$Month,data$Year), FUN=aggregateType, na.rm=TRUE)
names(temp)[1] = "Month"
names(temp)[2] = "Year"
names(temp)[3] = field
temp$month_txt = month.abb[temp$Month]
grids[[loc]] <- temp
plotYmax <- max(plotYmax, temp[[field]])
plotYmin <- min(plotYmin, temp[[field]])
}
commands <- ifelse(shouldOutputFigure, "arrangeGrob(", "grid.arrange(")
for (loc in locations) {
grids[[loc]] <- ggplot(data=grids[[loc]], aes(x=month_txt,y=get(field))) +
ylim(plotYmin, plotYmax) +
ggtitle(loc) +
geom_boxplot(aes(month_txt, get(field)), outlier.shape = NA) +
geom_point(aes(colour=cut(Year, c(2001, 2002, 2017, 2018)), size=cut(Year, c(2001, 2002, 2017, 2018))), position=jitter, alpha=0.5) +
scale_color_manual(name = "Years",
values = c("(2001,2002]" = "green4",
"(2002,2017]" = "Black",
"(2017,2018]" = "Red"),
labels = c("2002", "2003-2017", "2018")) +
scale_size_manual(name = "Years",
values = c(2, 1, 2),
labels = c("2002", "2003-2017", "2018")) +
scale_x_discrete(limits=month.abb[1:8]) +
labs(x = "Month") +
labs(y = fieldPlotLabel)
commands <- paste(commands, "grids$", loc, ", ", sep="")
}
commands <- paste(commands, "nrow=", gridRowNum, ")", sep="")
g <- eval(parse(text=commands))
if (shouldOutputFigure) {
ggsave(outputFile, g, units="in", width=outputPlotWidth,
height=outputPlotHeight, dpi=300, compression = "lzw")
} else {
g
}
setwd("~/inla-tutorial-master/dat")
# select an area between: NTS, NTN, KL, HK
area <- "KL"
# load from csv file into 'data' variable
filePath <- paste("../../dat/monthly_data_/", area, ".csv", sep="")
data <- read.csv(filePath, header=T)
# load from csv file into 'data' variable
filePath <- paste("../../dat/monthly_data_", area, ".csv", sep="")
data <- read.csv(filePath, header=T)
# load from csv file into 'data' variable
filePath <- paste("../../dat/monthly_data_", area, ".csv", sep="/")
data <- read.csv(filePath, header=T)
setwd("C:/Users/tirunesh/Desktop/dengue-forecast-hk-master/dat/climate")
View(data)
# select an area between: NTS, NTN, KL, HK
area <- "KL"
# load from csv file into 'data' variable
filePath <- paste("../../dat/monthly_data_", area, ".csv", sep="/")
setwd("~/inla-tutorial-master/dat")
library(readr)
monthly_data_KL <- read_csv("monthly_data_KL.csv")
View(monthly_data_KL)
data <-monthly_data_KL
# clean data (esp. those with '#')
for (fieldName in names(data)) {
data[[fieldName]] <- as.numeric(gsub("[^.0-9]", "", data[[fieldName]]))
}
library("INLA")
library("dlnm")
library("splines")
# create crossbasis variables
cb.meanTemperature <- crossbasis(data$temperature_avg, lag=6,
argvar=list(fun="ns", df=3),
arglag=list(fun="ns", knots=logknots(6,1)))
cb.totalRainfall <- crossbasis(data$total_rain, lag=6,
argvar=list(fun="ns", df=3),
arglag=list(fun="ns", knots=logknots(6, 1)))
getUpdatedColnames <- function(varName, oldColnames) {
newColnames <- c()
for (colname_i in 1:length(oldColnames)) {
newColnames[colname_i] <- paste(varName,
oldColnames[colname_i],
sep="")
}
return (newColnames)
}
getRelevantCoefAndVcov <- function(varName, summary.fixed, coef, vcov) {
cond <- paste(varName,"[[:print:]]*v[0-9]{1,2}\\.l[0-9]{1,2}",sep="")
indvcov <- grep(cond, rownames(vcov))
indcoef <- grep(cond, rownames(summary.fixed))
coef <- coef[indcoef]
vcov <- vcov[indvcov,indvcov,drop=FALSE]
return (list("coef"=coef, "vcov"=vcov))
}
# update colnames
colnames(cb.meanTemperature) <- getUpdatedColnames("cb.meanTemperature", colnames(cb.meanTemperature))
inla.fit <- inla(formula=formula1, data=data, family="poisson",
control.predictor=list(compute=TRUE),
control.compute=list(dic=TRUE, cpo=TRUE,waic=TRUE,mlik=TRUE))
inla.coef <- inla.fit$summary.fixed$mean
inla.vcov <- inla.fit$misc$lincomb.derived.covariance.matrix
# obtaining values relevant to cb.meanTemperature
info.meanTemperature <- getRelevantCoefAndVcov("cb.meanTemperature", inla.fit$summary.fixed,
inla.coef, inla.vcov)
info.totalRainfall <- getRelevantCoefAndVcov("cb.totalRainfall", inla.fit$summary.fixed,
inla.coef, inla.vcov)
inla.fit <- inla(formula=formula1, data=data, family="poisson",
control.predictor=list(compute=TRUE),
control.compute=list(dic=TRUE, cpo=TRUE,waic=TRUE,mlik=TRUE))
inla.fit <- inla(ovitrap_idx ~ cb.meanTemperature + cb.totalRainfall,
data=data,
control.fixed=list(correlation.matrix=T),
control.compute=list(dic=T, waic=T, config=T))
inla.coef <- inla.fit$summary.fixed$mean
inla.vcov <- inla.fit$misc$lincomb.derived.covariance.matrix
# obtaining values relevant to cb.meanTemperature
info.meanTemperature <- getRelevantCoefAndVcov("cb.meanTemperature", inla.fit$summary.fixed,
inla.coef, inla.vcov)
info.totalRainfall <- getRelevantCoefAndVcov("cb.totalRainfall", inla.fit$summary.fixed,
inla.coef, inla.vcov)
predicted <- rep(NA, 120)
tytyt
# obtaining values relevant to cb.meanTemperature
info.meanTemperature <- getRelevantCoefAndVcov("cb.meanTemperature", inla.fit$summary.fixed,
inla.coef, inla.vcov)
predicted <- rep(NA, 120)
inla.intercept <- inla.fit$summary.fixed$mean[1]
for (row_i in 9:120) {
temp.row <- cb.meanTemperature[row_i,]
rain.row <- cb.totalRainfall[row_i,]
predicted[row_i] <- sum(temp.row * info.meanTemperature$coef) +
sum(rain.row * info.totalRainfall$coef) + inla.intercept
}
predicted[predicted < 0] <- 0
plot(data$ovitrap_idx, type="l", col="red")
lines(predicted, col="blue")
predicted[predicted < 0] <- 0
plot(data$ovitrap_idx, type="l", col="red")
lines(predicted, col="blue")
predicted <- rep(NA, 120)
yuy
predicted <- rep(NA, 120)
predicted <- rep(NA, 120)
inla.intercept <- inla.fit$summary.fixed$mean[1]
inla.fit <- inla(ovitrap_idx ~ cb.meanTemperature + cb.totalRainfall,
data=data,
control.fixed=list(correlation.matrix=T),
control.compute=list(dic=T, waic=T, config=T))
inla.coef <- inla.fit$summary.fixed$mean
inla.vcov <- inla.fit$misc$lincomb.derived.covariance.matrix
# obtaining values relevant to cb.meanTemperature
info.meanTemperature <- getRelevantCoefAndVcov("cb.meanTemperature", inla.fit$summary.fixed,
inla.coef, inla.vcov)
info.totalRainfall <- getRelevantCoefAndVcov("cb.totalRainfall", inla.fit$summary.fixed,
inla.coef, inla.vcov)
predicted <- rep(NA, 120)
inla.intercept <- inla.fit$summary.fixed$mean[1]
for (row_i in 9:120) {
temp.row <- cb.meanTemperature[row_i,]
rain.row <- cb.totalRainfall[row_i,]
predicted[row_i] <- sum(temp.row * info.meanTemperature$coef) +
sum(rain.row * info.totalRainfall$coef) + inla.intercept
}
predicted[predicted < 0] <- 0
plot(data$ovitrap_idx, type="l", col="red")
lines(predicted, col="blue")
# clean the environment
rm(list=ls(all=TRUE))
setwd("~/inla-tutorial-master/dat")
# select an area between: NTS, NTN, KL, HK
area <- "KL"
# load from csv file into 'data' variable
filePath <- paste("../../dat/monthly_data_", area, ".csv", sep="/")
library(readr)
monthly_data_KL <- read_csv("monthly_data_KL.csv")
View(monthly_data_KL)
